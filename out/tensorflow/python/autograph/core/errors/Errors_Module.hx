/* This file is generated, do not edit! */
package tensorflow.python.autograph.core.errors;
@:pythonImport("tensorflow.python.autograph.core.errors") extern class Errors_Module {
	static public var __builtins__ : Dynamic;
	static public var __cached__ : Dynamic;
	static public var __doc__ : Dynamic;
	static public var __file__ : Dynamic;
	static public var __loader__ : Dynamic;
	static public var __name__ : Dynamic;
	static public var __package__ : Dynamic;
	static public var __spec__ : Dynamic;
	/**
		Check for cases where we leave a user method and re-enter it.
		
		This is done by looking at the function names when the filenames are from any
		files the user code is in.  If we find a case where we return to a user method
		after leaving it then we cut out the frames in between because we assume this
		means these in between frames are from internal AutoGraph code that shouldn't
		be included.
		
		An example of this is:
		
		 File "file1.py", line 57, in my_func
		   ...
		 File "control_flow_ops.py", line 231, in cond
		   ...
		 File "control_flow_ops.py", line 1039, in inner_cond
		   ...
		 File "file1.py", line 68, in my_func
		   ...
		
		Where we would remove the control_flow_ops.py frames because we re-enter
		my_func in file1.py.
		
		The source map keys are (file_path, line_number) so get the set of all user
		file_paths.
		
		Args:
		  source_map: Dict[origin_info.LineLocation, origin_info.OriginInfo], mapping
		    locations to their origin
		  original_traceback: List[Tuple[Text, Text, Text, Text]], consistent with
		    traceback.extract_tb.
		
		Returns:
		  List[Tuple[Text, Text, Text, Text]], the traceback with any loops removed.
	**/
	static public function _cut_traceback_loops(source_map:Dynamic, original_traceback:Dynamic):Dynamic;
	/**
		Rewrites code references in a traceback.
		
		Args:
		  source_map: Dict[origin_info.LineLocation, origin_info.OriginInfo], mapping
		      locations to their origin
		  tb: List[Tuple[Text, Text, Text, Text]], consistent with
		      traceback.extract_tb.
		Returns:
		  List[Tuple[Text, Text, Text, Text]], the rewritten traceback
	**/
	static public function _rewrite_tb(source_map:Dynamic, tb:Dynamic):Dynamic;
	static public var absolute_import : Dynamic;
	static public var division : Dynamic;
	/**
		Context manager that rewrites runtime errors.
		
		This context manager will rewrite runtime errors so that their traceback
		is relative to the original code before conversion.
		
		Use with the output of to_graph, and wrap the execution of respective ops.
		Example:
		
		  converted_my_func = ag.to_graph(my_func)
		  ops = converted_my_func(...)
		
		  with ag.improved_errors(converted_my_func):
		    sess.run(ops)
		
		Args:
		  converted_function: Callable[..., Any], the output of a to_graph call
		
		Yields:
		  None
		
		Raises:
		  TfRuntimeError: if any OpError originates in the converted code, it will
		      be wrapped into a TfRuntimeError
		  ValueError: If converted_function is not generated by AutoGraph
	**/
	static public function improved_errors(converted_function:Dynamic):Dynamic;
	static public var print_function : Dynamic;
	/**
		Rewrites errors raised by non-AG APIs inside AG generated code.
		
		This is called from the except handler inside an AutoGraph generated function
		(that is, during exception handling). Only rewrites the frames corresponding
		to the function that this is called from, so each function is responsible
		to call this to have its own frames rewritten.
		
		This function always raises an error.
		
		Args:
		  source_map: Dict[origin_info.Location, origin_info.OriginInfo], the source
		      map belonging to the calling function
		
		Raises:
		  GraphConstructionError: The rewritten underlying error.
		  Exception: The underlying error, if it could not be rewritten.
	**/
	static public function rewrite_graph_construction_error(source_map:Dynamic):Dynamic;
	/**
		Rewrites TensorFlow runtime errors raised by ops created in AG code.
		
		Args:
		  error: tf.OpError
		  source_map: Dict[origin_info.LineLocation, origin_info.OriginInfo]
		
		Returns:
		  TfRuntimeError, the rewritten underlying error.
	**/
	static public function rewrite_tf_runtime_error(error:Dynamic, source_map:Dynamic):Dynamic;
}