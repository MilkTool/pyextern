/* This file is generated, do not edit! */
package tensorflow.python.grappler.item;
@:pythonImport("tensorflow.python.grappler.item", "Item") extern class Item {
	/**
		Return a list of hard colocation constraints.
		
		All the nodes in a colocation tuple must be placed on the same device for
		the model to work.
		
		Returns:
		  A list of colocation tuples.
	**/
	public function GetColocationGroups():Dynamic;
	public function GetOpProperties():Dynamic;
	public function IdentifyImportantOps(?sort_topologically:Dynamic):Dynamic;
	public function _BuildTFItem():Dynamic;
	public function __class__(args:haxe.extern.Rest<Dynamic>):Dynamic;
	/**
		Implement delattr(self, name).
	**/
	public function __delattr__(name:Dynamic):Dynamic;
	static public var __dict__ : Dynamic;
	/**
		__dir__() -> list
		default dir() implementation
	**/
	public function __dir__(args:haxe.extern.Rest<Dynamic>):Dynamic;
	static public var __doc__ : Dynamic;
	/**
		Return self==value.
	**/
	public function __eq__(value:Dynamic):Dynamic;
	/**
		default object formatter
	**/
	public function __format__(args:haxe.extern.Rest<Dynamic>):Dynamic;
	/**
		Return self>=value.
	**/
	public function __ge__(value:Dynamic):Dynamic;
	/**
		Return getattr(self, name).
	**/
	public function __getattribute__(name:Dynamic):Dynamic;
	/**
		Return self>value.
	**/
	public function __gt__(value:Dynamic):Dynamic;
	/**
		Return hash(self).
	**/
	public function __hash__():Dynamic;
	/**
		Creates an Item.
		
		Args:
		  metagraph: a TensorFlow metagraph.
		  ignore_colocation: if set, the tool will ignore all the colocation
		    constraints generated by TensorFlow.
		  ignore_user_placement: if set, all the placement annotations annotated in
		    the metagraph will be ignored.
		Raises:
		  ValueError: the metagraph is incomplete or invalid.
	**/
	@:native("__init__")
	public function ___init__(metagraph:Dynamic, ?ignore_colocation:Dynamic, ?ignore_user_placement:Dynamic):Dynamic;
	/**
		Creates an Item.
		
		Args:
		  metagraph: a TensorFlow metagraph.
		  ignore_colocation: if set, the tool will ignore all the colocation
		    constraints generated by TensorFlow.
		  ignore_user_placement: if set, all the placement annotations annotated in
		    the metagraph will be ignored.
		Raises:
		  ValueError: the metagraph is incomplete or invalid.
	**/
	public function new(metagraph:Dynamic, ?ignore_colocation:Dynamic, ?ignore_user_placement:Dynamic):Void;
	/**
		This method is called when a class is subclassed.
		
		The default implementation does nothing. It may be
		overridden to extend subclasses.
	**/
	public function __init_subclass__(args:haxe.extern.Rest<Dynamic>):Dynamic;
	/**
		Return self<=value.
	**/
	public function __le__(value:Dynamic):Dynamic;
	/**
		Return self<value.
	**/
	public function __lt__(value:Dynamic):Dynamic;
	static public var __module__ : Dynamic;
	/**
		Return self!=value.
	**/
	public function __ne__(value:Dynamic):Dynamic;
	/**
		Create and return a new object.  See help(type) for accurate signature.
	**/
	static public function __new__(?args:python.VarArgs<Dynamic>, ?kwargs:python.KwArgs<Dynamic>):Dynamic;
	/**
		helper for pickle
	**/
	public function __reduce__(args:haxe.extern.Rest<Dynamic>):Dynamic;
	/**
		helper for pickle
	**/
	public function __reduce_ex__(args:haxe.extern.Rest<Dynamic>):Dynamic;
	/**
		Return repr(self).
	**/
	public function __repr__():Dynamic;
	/**
		Implement setattr(self, name, value).
	**/
	public function __setattr__(name:Dynamic, value:Dynamic):Dynamic;
	/**
		__sizeof__() -> int
		size of object in memory, in bytes
	**/
	public function __sizeof__(args:haxe.extern.Rest<Dynamic>):Dynamic;
	/**
		Return str(self).
	**/
	public function __str__():Dynamic;
	/**
		Abstract classes can override this to customize issubclass().
		
		This is invoked early on by abc.ABCMeta.__subclasscheck__().
		It should return True, False or NotImplemented.  If it returns
		NotImplemented, the normal algorithm is used.  Otherwise, it
		overrides the normal algorithm (and the outcome is cached).
	**/
	public function __subclasshook__(args:haxe.extern.Rest<Dynamic>):Dynamic;
	/**
		list of weak references to the object (if defined)
	**/
	public var __weakref__ : Dynamic;
	public var metagraph : Dynamic;
	public var tf_item : Dynamic;
}